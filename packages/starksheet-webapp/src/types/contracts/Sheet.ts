/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type {
  Contract,
  EstimateFeeResponse,
  GetTransactionResponse,
  Invocation,
  Overrides,
} from "starknet";
import type { BlockIdentifier } from "starknet/provider/utils";
import type { BigNumberish } from "starknet/utils/number";

export type Uint256 = { low: BigNumberish; high: BigNumberish };
export type Uint256Output = { low: BN; high: BN };

export type CellRendered = {
  id: BigNumberish;
  owner: BigNumberish;
  value: BigNumberish;
};
export type CellRenderedOutput = { id: BN; owner: BN; value: BN };

export interface Sheet extends Contract {
  getOwner(options?: {
    blockIdentifier?: BlockIdentifier;
  }): Promise<[BN] & { owner: BN }>;
  transferOwnership(
    new_owner: BigNumberish,
    options?: Overrides
  ): Promise<GetTransactionResponse>;
  setMaxPerWallet(
    max: BigNumberish,
    options?: Overrides
  ): Promise<GetTransactionResponse>;
  getMaxPerWallet(options?: {
    blockIdentifier?: BlockIdentifier;
  }): Promise<[BN] & { max: BN }>;
  setCellRenderer(
    address: BigNumberish,
    options?: Overrides
  ): Promise<GetTransactionResponse>;
  getCellRenderer(options?: {
    blockIdentifier?: BlockIdentifier;
  }): Promise<[BN] & { address: BN }>;
  setMerkleRoot(
    root: BigNumberish,
    options?: Overrides
  ): Promise<GetTransactionResponse>;
  getMerkleRoot(options?: {
    blockIdentifier?: BlockIdentifier;
  }): Promise<[BN] & { root: BN }>;
  setCell(
    tokenId: BigNumberish,
    contractAddress: BigNumberish,
    value: BigNumberish,
    cell_calldata: BigNumberish[],
    options?: Overrides
  ): Promise<GetTransactionResponse>;
  getCell(
    tokenId: BigNumberish,
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<
    [BN, BN, BN[]] & { contractAddress: BN; value: BN; cell_calldata: BN[] }
  >;
  renderCell(
    tokenId: BigNumberish,
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[CellRenderedOutput] & { cell: CellRenderedOutput }>;
  renderCellValue(
    tokenId: BigNumberish,
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[BN] & { value: BN }>;
  renderGrid(options?: {
    blockIdentifier?: BlockIdentifier;
  }): Promise<[CellRenderedOutput[]] & { cells: CellRenderedOutput[] }>;
  mintPublic(
    tokenId: Uint256,
    proof: BigNumberish[],
    options?: Overrides
  ): Promise<GetTransactionResponse>;
  mintAndSetPublic(
    tokenId: Uint256,
    proof: BigNumberish[],
    contractAddress: BigNumberish,
    value: BigNumberish,
    cellCalldata: BigNumberish[],
    options?: Overrides
  ): Promise<GetTransactionResponse>;
  tokenURI(
    tokenId: Uint256,
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[BN[]] & { token_uri: BN[] }>;
  totalSupply(options?: {
    blockIdentifier?: BlockIdentifier;
  }): Promise<[Uint256Output] & { totalSupply: Uint256Output }>;
  tokenByIndex(
    index: Uint256,
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[Uint256Output] & { tokenId: Uint256Output }>;
  tokenOfOwnerByIndex(
    owner: BigNumberish,
    index: Uint256,
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[Uint256Output] & { tokenId: Uint256Output }>;
  supportsInterface(
    interfaceId: BigNumberish,
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[BN] & { success: BN }>;
  name(options?: {
    blockIdentifier?: BlockIdentifier;
  }): Promise<[BN] & { name: BN }>;
  symbol(options?: {
    blockIdentifier?: BlockIdentifier;
  }): Promise<[BN] & { symbol: BN }>;
  balanceOf(
    owner: BigNumberish,
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[Uint256Output] & { balance: Uint256Output }>;
  ownerOf(
    tokenId: Uint256,
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[BN] & { owner: BN }>;
  getApproved(
    tokenId: Uint256,
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[BN] & { approved: BN }>;
  isApprovedForAll(
    owner: BigNumberish,
    operator: BigNumberish,
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[BN] & { isApproved: BN }>;
  approve(
    to: BigNumberish,
    tokenId: Uint256,
    options?: Overrides
  ): Promise<GetTransactionResponse>;
  setApprovalForAll(
    operator: BigNumberish,
    approved: BigNumberish,
    options?: Overrides
  ): Promise<GetTransactionResponse>;
  transferFrom(
    from_: BigNumberish,
    to: BigNumberish,
    tokenId: Uint256,
    options?: Overrides
  ): Promise<GetTransactionResponse>;
  safeTransferFrom(
    from_: BigNumberish,
    to: BigNumberish,
    tokenId: Uint256,
    data: BigNumberish[],
    options?: Overrides
  ): Promise<GetTransactionResponse>;
  mintOwner(
    to: BigNumberish,
    tokenId: Uint256,
    options?: Overrides
  ): Promise<GetTransactionResponse>;
  burn(tokenId: Uint256, options?: Overrides): Promise<GetTransactionResponse>;
  functions: {
    getOwner(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BN] & { owner: BN }>;
    transferOwnership(
      new_owner: BigNumberish,
      options?: Overrides
    ): Promise<GetTransactionResponse>;
    setMaxPerWallet(
      max: BigNumberish,
      options?: Overrides
    ): Promise<GetTransactionResponse>;
    getMaxPerWallet(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BN] & { max: BN }>;
    setCellRenderer(
      address: BigNumberish,
      options?: Overrides
    ): Promise<GetTransactionResponse>;
    getCellRenderer(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BN] & { address: BN }>;
    setMerkleRoot(
      root: BigNumberish,
      options?: Overrides
    ): Promise<GetTransactionResponse>;
    getMerkleRoot(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BN] & { root: BN }>;
    setCell(
      tokenId: BigNumberish,
      contractAddress: BigNumberish,
      value: BigNumberish,
      cell_calldata: BigNumberish[],
      options?: Overrides
    ): Promise<GetTransactionResponse>;
    getCell(
      tokenId: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<
      [BN, BN, BN[]] & { contractAddress: BN; value: BN; cell_calldata: BN[] }
    >;
    renderCell(
      tokenId: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[CellRenderedOutput] & { cell: CellRenderedOutput }>;
    renderCellValue(
      tokenId: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { value: BN }>;
    renderGrid(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[CellRenderedOutput[]] & { cells: CellRenderedOutput[] }>;
    mintPublic(
      tokenId: Uint256,
      proof: BigNumberish[],
      options?: Overrides
    ): Promise<GetTransactionResponse>;
    mintAndSetPublic(
      tokenId: Uint256,
      proof: BigNumberish[],
      contractAddress: BigNumberish,
      value: BigNumberish,
      cellCalldata: BigNumberish[],
      options?: Overrides
    ): Promise<GetTransactionResponse>;
    tokenURI(
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN[]] & { token_uri: BN[] }>;
    totalSupply(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[Uint256Output] & { totalSupply: Uint256Output }>;
    tokenByIndex(
      index: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[Uint256Output] & { tokenId: Uint256Output }>;
    tokenOfOwnerByIndex(
      owner: BigNumberish,
      index: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[Uint256Output] & { tokenId: Uint256Output }>;
    supportsInterface(
      interfaceId: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { success: BN }>;
    name(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BN] & { name: BN }>;
    symbol(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BN] & { symbol: BN }>;
    balanceOf(
      owner: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[Uint256Output] & { balance: Uint256Output }>;
    ownerOf(
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { owner: BN }>;
    getApproved(
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { approved: BN }>;
    isApprovedForAll(
      owner: BigNumberish,
      operator: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { isApproved: BN }>;
    approve(
      to: BigNumberish,
      tokenId: Uint256,
      options?: Overrides
    ): Promise<GetTransactionResponse>;
    setApprovalForAll(
      operator: BigNumberish,
      approved: BigNumberish,
      options?: Overrides
    ): Promise<GetTransactionResponse>;
    transferFrom(
      from_: BigNumberish,
      to: BigNumberish,
      tokenId: Uint256,
      options?: Overrides
    ): Promise<GetTransactionResponse>;
    safeTransferFrom(
      from_: BigNumberish,
      to: BigNumberish,
      tokenId: Uint256,
      data: BigNumberish[],
      options?: Overrides
    ): Promise<GetTransactionResponse>;
    mintOwner(
      to: BigNumberish,
      tokenId: Uint256,
      options?: Overrides
    ): Promise<GetTransactionResponse>;
    burn(
      tokenId: Uint256,
      options?: Overrides
    ): Promise<GetTransactionResponse>;
  };
  callStatic: {
    getOwner(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BN] & { owner: BN }>;
    transferOwnership(
      new_owner: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[] & {}>;
    setMaxPerWallet(
      max: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[] & {}>;
    getMaxPerWallet(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BN] & { max: BN }>;
    setCellRenderer(
      address: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[] & {}>;
    getCellRenderer(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BN] & { address: BN }>;
    setMerkleRoot(
      root: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[] & {}>;
    getMerkleRoot(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BN] & { root: BN }>;
    setCell(
      tokenId: BigNumberish,
      contractAddress: BigNumberish,
      value: BigNumberish,
      cell_calldata: BigNumberish[],
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[] & {}>;
    getCell(
      tokenId: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<
      [BN, BN, BN[]] & { contractAddress: BN; value: BN; cell_calldata: BN[] }
    >;
    renderCell(
      tokenId: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[CellRenderedOutput] & { cell: CellRenderedOutput }>;
    renderCellValue(
      tokenId: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { value: BN }>;
    renderGrid(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[CellRenderedOutput[]] & { cells: CellRenderedOutput[] }>;
    mintPublic(
      tokenId: Uint256,
      proof: BigNumberish[],
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[] & {}>;
    mintAndSetPublic(
      tokenId: Uint256,
      proof: BigNumberish[],
      contractAddress: BigNumberish,
      value: BigNumberish,
      cellCalldata: BigNumberish[],
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[] & {}>;
    tokenURI(
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN[]] & { token_uri: BN[] }>;
    totalSupply(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[Uint256Output] & { totalSupply: Uint256Output }>;
    tokenByIndex(
      index: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[Uint256Output] & { tokenId: Uint256Output }>;
    tokenOfOwnerByIndex(
      owner: BigNumberish,
      index: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[Uint256Output] & { tokenId: Uint256Output }>;
    supportsInterface(
      interfaceId: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { success: BN }>;
    name(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BN] & { name: BN }>;
    symbol(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BN] & { symbol: BN }>;
    balanceOf(
      owner: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[Uint256Output] & { balance: Uint256Output }>;
    ownerOf(
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { owner: BN }>;
    getApproved(
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { approved: BN }>;
    isApprovedForAll(
      owner: BigNumberish,
      operator: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { isApproved: BN }>;
    approve(
      to: BigNumberish,
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[] & {}>;
    setApprovalForAll(
      operator: BigNumberish,
      approved: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[] & {}>;
    transferFrom(
      from_: BigNumberish,
      to: BigNumberish,
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[] & {}>;
    safeTransferFrom(
      from_: BigNumberish,
      to: BigNumberish,
      tokenId: Uint256,
      data: BigNumberish[],
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[] & {}>;
    mintOwner(
      to: BigNumberish,
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[] & {}>;
    burn(
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[] & {}>;
  };
  populateTransaction: {
    getOwner(options?: { blockIdentifier?: BlockIdentifier }): Invocation;
    transferOwnership(new_owner: BigNumberish, options?: Overrides): Invocation;
    setMaxPerWallet(max: BigNumberish, options?: Overrides): Invocation;
    getMaxPerWallet(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Invocation;
    setCellRenderer(address: BigNumberish, options?: Overrides): Invocation;
    getCellRenderer(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Invocation;
    setMerkleRoot(root: BigNumberish, options?: Overrides): Invocation;
    getMerkleRoot(options?: { blockIdentifier?: BlockIdentifier }): Invocation;
    setCell(
      tokenId: BigNumberish,
      contractAddress: BigNumberish,
      value: BigNumberish,
      cell_calldata: BigNumberish[],
      options?: Overrides
    ): Invocation;
    getCell(
      tokenId: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    renderCell(
      tokenId: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    renderCellValue(
      tokenId: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    renderGrid(options?: { blockIdentifier?: BlockIdentifier }): Invocation;
    mintPublic(
      tokenId: Uint256,
      proof: BigNumberish[],
      options?: Overrides
    ): Invocation;
    mintAndSetPublic(
      tokenId: Uint256,
      proof: BigNumberish[],
      contractAddress: BigNumberish,
      value: BigNumberish,
      cellCalldata: BigNumberish[],
      options?: Overrides
    ): Invocation;
    tokenURI(
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    totalSupply(options?: { blockIdentifier?: BlockIdentifier }): Invocation;
    tokenByIndex(
      index: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    tokenOfOwnerByIndex(
      owner: BigNumberish,
      index: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    supportsInterface(
      interfaceId: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    name(options?: { blockIdentifier?: BlockIdentifier }): Invocation;
    symbol(options?: { blockIdentifier?: BlockIdentifier }): Invocation;
    balanceOf(
      owner: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    ownerOf(
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    getApproved(
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    isApprovedForAll(
      owner: BigNumberish,
      operator: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    approve(
      to: BigNumberish,
      tokenId: Uint256,
      options?: Overrides
    ): Invocation;
    setApprovalForAll(
      operator: BigNumberish,
      approved: BigNumberish,
      options?: Overrides
    ): Invocation;
    transferFrom(
      from_: BigNumberish,
      to: BigNumberish,
      tokenId: Uint256,
      options?: Overrides
    ): Invocation;
    safeTransferFrom(
      from_: BigNumberish,
      to: BigNumberish,
      tokenId: Uint256,
      data: BigNumberish[],
      options?: Overrides
    ): Invocation;
    mintOwner(
      to: BigNumberish,
      tokenId: Uint256,
      options?: Overrides
    ): Invocation;
    burn(tokenId: Uint256, options?: Overrides): Invocation;
  };
  estimateFee: {
    getOwner(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<EstimateFeeResponse>;
    transferOwnership(
      new_owner: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    setMaxPerWallet(
      max: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    getMaxPerWallet(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<EstimateFeeResponse>;
    setCellRenderer(
      address: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    getCellRenderer(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<EstimateFeeResponse>;
    setMerkleRoot(
      root: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    getMerkleRoot(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<EstimateFeeResponse>;
    setCell(
      tokenId: BigNumberish,
      contractAddress: BigNumberish,
      value: BigNumberish,
      cell_calldata: BigNumberish[],
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    getCell(
      tokenId: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    renderCell(
      tokenId: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    renderCellValue(
      tokenId: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    renderGrid(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<EstimateFeeResponse>;
    mintPublic(
      tokenId: Uint256,
      proof: BigNumberish[],
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    mintAndSetPublic(
      tokenId: Uint256,
      proof: BigNumberish[],
      contractAddress: BigNumberish,
      value: BigNumberish,
      cellCalldata: BigNumberish[],
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    tokenURI(
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    totalSupply(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<EstimateFeeResponse>;
    tokenByIndex(
      index: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    tokenOfOwnerByIndex(
      owner: BigNumberish,
      index: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    supportsInterface(
      interfaceId: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    name(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<EstimateFeeResponse>;
    symbol(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<EstimateFeeResponse>;
    balanceOf(
      owner: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    ownerOf(
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    getApproved(
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    isApprovedForAll(
      owner: BigNumberish,
      operator: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    approve(
      to: BigNumberish,
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    setApprovalForAll(
      operator: BigNumberish,
      approved: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    transferFrom(
      from_: BigNumberish,
      to: BigNumberish,
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    safeTransferFrom(
      from_: BigNumberish,
      to: BigNumberish,
      tokenId: Uint256,
      data: BigNumberish[],
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    mintOwner(
      to: BigNumberish,
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    burn(
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
  };
}
