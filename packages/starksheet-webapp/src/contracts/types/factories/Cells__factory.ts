/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Cells, CellsInterface } from "../Cells";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "parseValue",
    outputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101b761003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063b0aabaff1461003a575b600080fd5b61004d6100483660046100d0565b61005f565b60405190815260200160405180910390f35b600060218251106100ab5760405162461bcd60e51b8152602060048201526012602482015271706172736556616c7565206f7665666c6f7760701b604482015260640160405180910390fd5b50805160209182015191031c90565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156100e257600080fd5b813567ffffffffffffffff808211156100fa57600080fd5b818401915084601f83011261010e57600080fd5b813581811115610120576101206100ba565b604051601f8201601f19908116603f01168101908382118183101715610148576101486100ba565b8160405282815287602084870101111561016157600080fd5b82602086016020830137600092810160200192909252509594505050505056fea2646970667358221220a0b43b9c37a67671fa8a37d6de6a82ea1866f496d820798dc9ceed20e72f6ad264736f6c63430008110033";

type CellsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CellsConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Cells__factory extends ContractFactory {
  constructor(...args: CellsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: string }): Promise<Cells> {
    return super.deploy(overrides || {}) as Promise<Cells>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Cells {
    return super.attach(address) as Cells;
  }
  override connect(signer: Signer): Cells__factory {
    return super.connect(signer) as Cells__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CellsInterface {
    return new utils.Interface(_abi) as CellsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Cells {
    return new Contract(address, _abi, signerOrProvider) as Cells;
  }
}
