/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface EvmsheetInterface extends utils.Interface {
  functions: {
    "addSheet(string,string,bytes32)": FunctionFragment;
    "defaultRenderer()": FunctionFragment;
    "getSheetCreationAddress(address,bytes32)": FunctionFragment;
    "getSheetCreationCode()": FunctionFragment;
    "getSheets()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDefaultRenderer(address)": FunctionFragment;
    "sheetPrice()": FunctionFragment;
    "sheets(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addSheet"
      | "defaultRenderer"
      | "getSheetCreationAddress"
      | "getSheetCreationCode"
      | "getSheets"
      | "owner"
      | "renounceOwnership"
      | "setDefaultRenderer"
      | "sheetPrice"
      | "sheets"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addSheet",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultRenderer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSheetCreationAddress",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSheetCreationCode",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getSheets", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultRenderer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sheetPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sheets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addSheet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultRenderer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSheetCreationAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSheetCreationCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSheets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultRenderer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sheetPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sheets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Evmsheet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EvmsheetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addSheet(
      name: string,
      symbol: string,
      salt: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    defaultRenderer(overrides?: CallOverrides): Promise<[string]>;

    getSheetCreationAddress(
      sender: string,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSheetCreationCode(overrides?: CallOverrides): Promise<[string]>;

    getSheets(overrides?: CallOverrides): Promise<[string[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDefaultRenderer(
      renderer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sheetPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    sheets(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addSheet(
    name: string,
    symbol: string,
    salt: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  defaultRenderer(overrides?: CallOverrides): Promise<string>;

  getSheetCreationAddress(
    sender: string,
    salt: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getSheetCreationCode(overrides?: CallOverrides): Promise<string>;

  getSheets(overrides?: CallOverrides): Promise<string[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDefaultRenderer(
    renderer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sheetPrice(overrides?: CallOverrides): Promise<BigNumber>;

  sheets(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addSheet(
      name: string,
      symbol: string,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultRenderer(overrides?: CallOverrides): Promise<string>;

    getSheetCreationAddress(
      sender: string,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getSheetCreationCode(overrides?: CallOverrides): Promise<string>;

    getSheets(overrides?: CallOverrides): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDefaultRenderer(
      renderer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sheetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    sheets(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addSheet(
      name: string,
      symbol: string,
      salt: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    defaultRenderer(overrides?: CallOverrides): Promise<BigNumber>;

    getSheetCreationAddress(
      sender: string,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSheetCreationCode(overrides?: CallOverrides): Promise<BigNumber>;

    getSheets(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setDefaultRenderer(
      renderer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sheetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    sheets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSheet(
      name: string,
      symbol: string,
      salt: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    defaultRenderer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSheetCreationAddress(
      sender: string,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSheetCreationCode(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSheets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDefaultRenderer(
      renderer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sheetPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sheets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
