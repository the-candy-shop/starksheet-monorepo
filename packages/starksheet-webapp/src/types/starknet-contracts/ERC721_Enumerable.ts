/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type {
  Contract,
  EstimateFeeResponse,
  GetTransactionResponse,
  Invocation,
  Overrides,
} from "starknet";
import type { BlockIdentifier } from "starknet/provider/utils";
import type { BigNumberish } from "starknet/utils/number";

export type Uint256 = { low: BigNumberish; high: BigNumberish };
export type Uint256Output = { low: BN; high: BN };

export interface ERC721_Enumerable extends Contract {
  totalSupply(options?: {
    blockIdentifier?: BlockIdentifier;
  }): Promise<[Uint256Output] & { totalSupply: Uint256Output }>;
  tokenByIndex(
    index: Uint256,
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[Uint256Output] & { tokenId: Uint256Output }>;
  tokenOfOwnerByIndex(
    owner: BigNumberish,
    index: Uint256,
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[Uint256Output] & { tokenId: Uint256Output }>;
  supportsInterface(
    interfaceId: BigNumberish,
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[BN] & { success: BN }>;
  name(options?: {
    blockIdentifier?: BlockIdentifier;
  }): Promise<[BN] & { name: BN }>;
  symbol(options?: {
    blockIdentifier?: BlockIdentifier;
  }): Promise<[BN] & { symbol: BN }>;
  balanceOf(
    owner: BigNumberish,
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[Uint256Output] & { balance: Uint256Output }>;
  ownerOf(
    tokenId: Uint256,
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[BN] & { owner: BN }>;
  getApproved(
    tokenId: Uint256,
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[BN] & { approved: BN }>;
  isApprovedForAll(
    owner: BigNumberish,
    operator: BigNumberish,
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[BN] & { isApproved: BN }>;
  approve(
    to: BigNumberish,
    tokenId: Uint256,
    options?: Overrides
  ): Promise<GetTransactionResponse>;
  setApprovalForAll(
    operator: BigNumberish,
    approved: BigNumberish,
    options?: Overrides
  ): Promise<GetTransactionResponse>;
  transferFrom(
    from_: BigNumberish,
    to: BigNumberish,
    tokenId: Uint256,
    options?: Overrides
  ): Promise<GetTransactionResponse>;
  safeTransferFrom(
    from_: BigNumberish,
    to: BigNumberish,
    tokenId: Uint256,
    data: BigNumberish[],
    options?: Overrides
  ): Promise<GetTransactionResponse>;
  mintOwner(
    to: BigNumberish,
    tokenId: Uint256,
    options?: Overrides
  ): Promise<GetTransactionResponse>;
  burn(tokenId: Uint256, options?: Overrides): Promise<GetTransactionResponse>;
  functions: {
    totalSupply(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[Uint256Output] & { totalSupply: Uint256Output }>;
    tokenByIndex(
      index: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[Uint256Output] & { tokenId: Uint256Output }>;
    tokenOfOwnerByIndex(
      owner: BigNumberish,
      index: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[Uint256Output] & { tokenId: Uint256Output }>;
    supportsInterface(
      interfaceId: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { success: BN }>;
    name(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BN] & { name: BN }>;
    symbol(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BN] & { symbol: BN }>;
    balanceOf(
      owner: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[Uint256Output] & { balance: Uint256Output }>;
    ownerOf(
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { owner: BN }>;
    getApproved(
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { approved: BN }>;
    isApprovedForAll(
      owner: BigNumberish,
      operator: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { isApproved: BN }>;
    approve(
      to: BigNumberish,
      tokenId: Uint256,
      options?: Overrides
    ): Promise<GetTransactionResponse>;
    setApprovalForAll(
      operator: BigNumberish,
      approved: BigNumberish,
      options?: Overrides
    ): Promise<GetTransactionResponse>;
    transferFrom(
      from_: BigNumberish,
      to: BigNumberish,
      tokenId: Uint256,
      options?: Overrides
    ): Promise<GetTransactionResponse>;
    safeTransferFrom(
      from_: BigNumberish,
      to: BigNumberish,
      tokenId: Uint256,
      data: BigNumberish[],
      options?: Overrides
    ): Promise<GetTransactionResponse>;
    mintOwner(
      to: BigNumberish,
      tokenId: Uint256,
      options?: Overrides
    ): Promise<GetTransactionResponse>;
    burn(
      tokenId: Uint256,
      options?: Overrides
    ): Promise<GetTransactionResponse>;
  };
  callStatic: {
    totalSupply(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[Uint256Output] & { totalSupply: Uint256Output }>;
    tokenByIndex(
      index: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[Uint256Output] & { tokenId: Uint256Output }>;
    tokenOfOwnerByIndex(
      owner: BigNumberish,
      index: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[Uint256Output] & { tokenId: Uint256Output }>;
    supportsInterface(
      interfaceId: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { success: BN }>;
    name(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BN] & { name: BN }>;
    symbol(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BN] & { symbol: BN }>;
    balanceOf(
      owner: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[Uint256Output] & { balance: Uint256Output }>;
    ownerOf(
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { owner: BN }>;
    getApproved(
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { approved: BN }>;
    isApprovedForAll(
      owner: BigNumberish,
      operator: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { isApproved: BN }>;
    approve(
      to: BigNumberish,
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[] & {}>;
    setApprovalForAll(
      operator: BigNumberish,
      approved: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[] & {}>;
    transferFrom(
      from_: BigNumberish,
      to: BigNumberish,
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[] & {}>;
    safeTransferFrom(
      from_: BigNumberish,
      to: BigNumberish,
      tokenId: Uint256,
      data: BigNumberish[],
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[] & {}>;
    mintOwner(
      to: BigNumberish,
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[] & {}>;
    burn(
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[] & {}>;
  };
  populateTransaction: {
    totalSupply(options?: { blockIdentifier?: BlockIdentifier }): Invocation;
    tokenByIndex(
      index: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    tokenOfOwnerByIndex(
      owner: BigNumberish,
      index: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    supportsInterface(
      interfaceId: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    name(options?: { blockIdentifier?: BlockIdentifier }): Invocation;
    symbol(options?: { blockIdentifier?: BlockIdentifier }): Invocation;
    balanceOf(
      owner: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    ownerOf(
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    getApproved(
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    isApprovedForAll(
      owner: BigNumberish,
      operator: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    approve(
      to: BigNumberish,
      tokenId: Uint256,
      options?: Overrides
    ): Invocation;
    setApprovalForAll(
      operator: BigNumberish,
      approved: BigNumberish,
      options?: Overrides
    ): Invocation;
    transferFrom(
      from_: BigNumberish,
      to: BigNumberish,
      tokenId: Uint256,
      options?: Overrides
    ): Invocation;
    safeTransferFrom(
      from_: BigNumberish,
      to: BigNumberish,
      tokenId: Uint256,
      data: BigNumberish[],
      options?: Overrides
    ): Invocation;
    mintOwner(
      to: BigNumberish,
      tokenId: Uint256,
      options?: Overrides
    ): Invocation;
    burn(tokenId: Uint256, options?: Overrides): Invocation;
  };
  estimateFee: {
    totalSupply(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<EstimateFeeResponse>;
    tokenByIndex(
      index: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    tokenOfOwnerByIndex(
      owner: BigNumberish,
      index: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    supportsInterface(
      interfaceId: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    name(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<EstimateFeeResponse>;
    symbol(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<EstimateFeeResponse>;
    balanceOf(
      owner: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    ownerOf(
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    getApproved(
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    isApprovedForAll(
      owner: BigNumberish,
      operator: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    approve(
      to: BigNumberish,
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    setApprovalForAll(
      operator: BigNumberish,
      approved: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    transferFrom(
      from_: BigNumberish,
      to: BigNumberish,
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    safeTransferFrom(
      from_: BigNumberish,
      to: BigNumberish,
      tokenId: Uint256,
      data: BigNumberish[],
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    mintOwner(
      to: BigNumberish,
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    burn(
      tokenId: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
  };
}
