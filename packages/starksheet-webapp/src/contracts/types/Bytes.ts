/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface BytesInterface extends utils.Interface {
  functions: {
    "equal(bytes,bytes)": FunctionFragment;
    "slice(bytes,uint256,uint256)": FunctionFragment;
    "toAddress(bytes,uint256)": FunctionFragment;
    "toByes7(bytes,uint256)": FunctionFragment;
    "toBytes1(bytes,uint256)": FunctionFragment;
    "toBytes12(bytes,uint256)": FunctionFragment;
    "toBytes16(bytes,uint256)": FunctionFragment;
    "toBytes32(bytes,uint256)": FunctionFragment;
    "toBytes5(bytes,uint256)": FunctionFragment;
    "toBytes6(bytes,uint256)": FunctionFragment;
    "toBytes8(bytes,uint256)": FunctionFragment;
    "toUint128(bytes,uint256)": FunctionFragment;
    "toUint16(bytes)": FunctionFragment;
    "toUint16(bytes,uint256)": FunctionFragment;
    "toUint24(bytes,uint256)": FunctionFragment;
    "toUint256(bytes,uint256)": FunctionFragment;
    "toUint32(bytes,uint256)": FunctionFragment;
    "toUint40(bytes,uint256)": FunctionFragment;
    "toUint48(bytes,uint256)": FunctionFragment;
    "toUint56(bytes,uint256)": FunctionFragment;
    "toUint64(bytes,uint256)": FunctionFragment;
    "toUint8(bytes,uint256)": FunctionFragment;
    "toUint96(bytes,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "equal"
      | "slice"
      | "toAddress"
      | "toByes7"
      | "toBytes1"
      | "toBytes12"
      | "toBytes16"
      | "toBytes32"
      | "toBytes5"
      | "toBytes6"
      | "toBytes8"
      | "toUint128"
      | "toUint16(bytes)"
      | "toUint16(bytes,uint256)"
      | "toUint24"
      | "toUint256"
      | "toUint32"
      | "toUint40"
      | "toUint48"
      | "toUint56"
      | "toUint64"
      | "toUint8"
      | "toUint96"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "equal",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "slice",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toAddress",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toByes7",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toBytes1",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toBytes12",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toBytes16",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toBytes32",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toBytes5",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toBytes6",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toBytes8",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUint128",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUint16(bytes)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toUint16(bytes,uint256)",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUint24",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUint256",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUint32",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUint40",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUint48",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUint56",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUint64",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUint8",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUint96",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "equal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toByes7", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toBytes1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toBytes12", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toBytes16", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toBytes32", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toBytes5", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toBytes6", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toBytes8", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toUint128", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toUint16(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toUint16(bytes,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toUint24", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toUint256", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toUint32", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toUint40", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toUint48", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toUint56", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toUint64", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toUint8", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toUint96", data: BytesLike): Result;

  events: {};
}

export interface Bytes extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BytesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    equal(
      _preBytes: BytesLike,
      _postBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    slice(
      _bytes: BytesLike,
      _start: BigNumberish,
      _length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    toAddress(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { tmp: string }>;

    toByes7(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { tmp: string }>;

    toBytes1(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { tmp: string }>;

    toBytes12(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { tmp: string }>;

    toBytes16(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { tmp: string }>;

    toBytes32(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { tmp: string }>;

    toBytes5(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { tmp: string }>;

    toBytes6(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { tmp: string }>;

    toBytes8(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tmp: BigNumber }>;

    toUint128(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tmp: BigNumber }>;

    "toUint16(bytes)"(
      _bytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number] & { tmp: number }>;

    "toUint16(bytes,uint256)"(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number] & { tmp: number }>;

    toUint24(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number] & { tmp: number }>;

    toUint256(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tmp: BigNumber }>;

    toUint32(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number] & { tmp: number }>;

    toUint40(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number] & { tmp: number }>;

    toUint48(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number] & { tmp: number }>;

    toUint56(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tmp: BigNumber }>;

    toUint64(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tmp: BigNumber }>;

    toUint8(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number] & { tmp: number }>;

    toUint96(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tmp: BigNumber }>;
  };

  equal(
    _preBytes: BytesLike,
    _postBytes: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  slice(
    _bytes: BytesLike,
    _start: BigNumberish,
    _length: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  toAddress(
    _bytes: BytesLike,
    _start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  toByes7(
    _bytes: BytesLike,
    _start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  toBytes1(
    _bytes: BytesLike,
    _start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  toBytes12(
    _bytes: BytesLike,
    _start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  toBytes16(
    _bytes: BytesLike,
    _start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  toBytes32(
    _bytes: BytesLike,
    _start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  toBytes5(
    _bytes: BytesLike,
    _start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  toBytes6(
    _bytes: BytesLike,
    _start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  toBytes8(
    _bytes: BytesLike,
    _start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toUint128(
    _bytes: BytesLike,
    _start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "toUint16(bytes)"(
    _bytes: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  "toUint16(bytes,uint256)"(
    _bytes: BytesLike,
    _start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  toUint24(
    _bytes: BytesLike,
    _start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  toUint256(
    _bytes: BytesLike,
    _start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toUint32(
    _bytes: BytesLike,
    _start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  toUint40(
    _bytes: BytesLike,
    _start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  toUint48(
    _bytes: BytesLike,
    _start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  toUint56(
    _bytes: BytesLike,
    _start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toUint64(
    _bytes: BytesLike,
    _start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toUint8(
    _bytes: BytesLike,
    _start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  toUint96(
    _bytes: BytesLike,
    _start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    equal(
      _preBytes: BytesLike,
      _postBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    slice(
      _bytes: BytesLike,
      _start: BigNumberish,
      _length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    toAddress(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    toByes7(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    toBytes1(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    toBytes12(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    toBytes16(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    toBytes32(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    toBytes5(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    toBytes6(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    toBytes8(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toUint128(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toUint16(bytes)"(
      _bytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    "toUint16(bytes,uint256)"(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    toUint24(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    toUint256(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toUint32(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    toUint40(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    toUint48(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    toUint56(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toUint64(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toUint8(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    toUint96(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    equal(
      _preBytes: BytesLike,
      _postBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    slice(
      _bytes: BytesLike,
      _start: BigNumberish,
      _length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toAddress(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toByes7(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toBytes1(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toBytes12(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toBytes16(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toBytes32(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toBytes5(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toBytes6(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toBytes8(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toUint128(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toUint16(bytes)"(
      _bytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toUint16(bytes,uint256)"(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toUint24(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toUint256(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toUint32(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toUint40(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toUint48(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toUint56(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toUint64(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toUint8(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toUint96(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    equal(
      _preBytes: BytesLike,
      _postBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    slice(
      _bytes: BytesLike,
      _start: BigNumberish,
      _length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toAddress(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toByes7(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toBytes1(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toBytes12(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toBytes16(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toBytes32(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toBytes5(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toBytes6(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toBytes8(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toUint128(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toUint16(bytes)"(
      _bytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toUint16(bytes,uint256)"(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toUint24(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toUint256(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toUint32(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toUint40(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toUint48(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toUint56(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toUint64(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toUint8(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toUint96(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
